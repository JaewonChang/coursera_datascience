set.seed(12345)
x <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
x
str(x)
x[sample(1:5), ]
sample(1:5)
set.seed(13435)
x <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
x
x[sample(1:5)]
x[sample(1:5),]
x[sample(1:5),];
x <- x[sample(1:5),]; x$var2[1:3] == NA
x
x <- x[sample(1:5),]; x$var2[c(1,3)] == NA
x <- x[sample(1:5),]; x$var2[c(1,3)] = NA
x
x["var1"]
x["var1", ]
x["var2", ]
x[1]
x
x[1, ]
x[, 1]
x[, 1]
x[, "var1"]
x[1:2, "var1"]
x[x$var1 >= 3 & x$var2 >= 9, ]
x[x$var1 >= 3 & x$var2 >= 11, ]
x[x$var1 >= 3 & x$var3 >= 11, ]
x[x$var1 < 3 & x$var3 > 11, ]
x[x$var1 < 3 | x$var3 > 11, ]
x[(x$var1 < 3 | x$var3 > 11), ]
x
ls()
clear
clear()
?which
x[which(x$var2 > 8)]
x[which(x$var2 > 8),]
x[x$var2 > 8,]
x[order(x$var1), ]
x
x[order(x$var1, x $var3), ]
install.packages("plyr")
x$var4 <- rnorm(5)
x
library(plyr)
arrange(x, var1)
?arrange
testName <- "this_is_a_test"
sub("_", replacement = "", x = testName)
sub(pattern = "_", replacement = "", x = testName)
gsub(pattern = "_", replacement = "", x = testName)
data(iris)
iris
head(iris)
str(iris)
?grep
grepl("setosa", x = iris$Species)
grep("setosa", x = iris$Species)
matrix(1:9, nrow = 3, ncol = 3 )
install.packages("ggplot2")
library(ggplot2)
open(https://www.d)
str(mpg)
help(mpg)
qplot(data = mpg, x = displ, y = hwy)
qplot(data = mpg, x = displ, y = hwy)
?qplot
qplot(data = mpg, x = displ, y = hwy, facets = drv)
qplot(data = mpg, x = displ, y = hwy, facets = drv)
qplot(data = mpg, x = displ, y = hwy, color = drv)
?qplot
qplot(data = mpg, x = displ, y = hwy, color = I("red"))
qplot(data = mpg, x = displ, y = hwy, color = drv)
?qplot
qplot(data = mpg, x = displ, y = hwy, color = drv, facets = cyl ~ drv)
qplot(displ, hwy, data = mpg, geom = c("smooth"))
qplot(displ, hwy, data = mpg, geom = c("smooth", "point"))
qplot(x = displ, data = mpg)
qplot(x = displ, data = mpg, fill = drv)
qplot(x = displ, data = mpg, fill = manufacturer)
qplot(x = cyl, data = mpg, fill = manufacturer)
qplot(x = displ, y = hwy, data = mpg, facets = .~drv)
data(maacs)
str(maacs)
setwd("/Users/jaewon/Desktop/coursera_datascience/Exploratory Data Analysis/data/")
setwd("/Users/jaewon/Desktop/coursera_datascience/Exploratory Data Analysis")
pollution <- read.csv(file = "data/avgpm25.csv")
str(pollution)
class <- c("numeric", "character", "factor", "numeric", "numeric")
class <- c("numeric", "character", "factor", "numeric", "numeric")
pollution <- read.csv(file = "data/avgpm25.csv", colClasses = class) ## Read the data from the folder
# Run basic statistical analysis on the given data
summary(pollution$pm25)
boxboxplot(pollution$pm25, col = "blue") ##
boxplot(x = pollution$pm25, col = "blue") ## Boxplot
library(dplyr)
head(poluution)
head(pollution)
filter(.data = pollution, pm25 > 15)
install.packages("map")
install.packages("maps")
library(dplyr); library(maps)
?map
map(database = "county", regions = "california")
map(database = "usa", regions = "california")
map(database = "usa")
map(database = "state", regions = "california")
map(database = "state")
map(database = "county", regions = "california")
filter(.data = pollution, pm25 > 15) ## We see that the outliers are in the west region (california)
map(database = "county", regions = "california")
with(filter(.data = pollution, pm25 > 15), points(longitude, latitude))
with(filter(.data = pollution, pm25 > 15), points(longitude, latitude), col = "red")
?points
with(filter(.data = pollution, pm25 > 15), points(longitude, latitude, pch = 1))
with(filter(.data = pollution, pm25 > 15), points(longitude, latitude, pch = 2))
with(filter(.data = pollution, pm25 > 15), points(longitude, latitude, pch = 5))
with(filter(.data = pollution, pm25 > 15), points(longitude, latitude, pch = 28))
filter(.data = pollution, pm25 > 15) ## We see that the outliers are in the west region (california)
map(database = "county", regions = "california")
with(filter(.data = pollution, pm25 > 15), points(longitude, latitude, pch = 28))
with(filter(.data = pollution, pm25 > 15), points(longitude, latitude, pch = 20))
boxplot(x = pollution$pm25, col = "blue") ## Boxplot
?map
hist(pollution$pm25, col = "green")
boxplot(x = pollution$pm25, col = "blue") ## Boxplot
# Run basic statistical analysis on the given data
summary(object = pollution$pm25) ## Brief statistcal summary of pm25
rug(x = pollution$pm25)
hist(x = pollution$pm25, col = "green") ## Draw a histogram
rug(x = pollution$pm25)
hist(x = pollution$pm25, col = "green", breaks = 100) ## Draw a histogram
rug(x = pollution$pm25)
abline(v = mean(pollution$pm25), col = "red", lwd = 2)
abline(v = median(pollution$pm25), col = "blue", lwd = 2)
table(... = pollution$region)
table(... = pollution$region) %>% barplot(col = "wheat")
boxplot(x = pollution$pm25 ~ pollution$region, col = "blue") ## Boxplot
boxplot(x = pm25 ~ region, data = pollution, col = "blue") ## Boxplot
boxplot(formula = pm25 ~ region, data = pollution, col = "blue") ## Boxplot
boxplot(x = pollution$pm25, col = "blue")
## Now let's draw scatterplot
with(data = pollution, plot(latitude, pm25))
## Now let's draw scatterplot
with(data = pollution, plot(latitude, longitutde))
## Now let's draw scatterplot
with(data = pollution, plot(latitude, longitude))
source('~/Desktop/coursera_datascience/Exploratory Data Analysis/Exploratory_Analysis1.r', echo=TRUE)
## Now let's draw scatterplot
with(data = pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
?legend
## Now let's draw scatterplot
with(data = pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
## Now let's draw scatterplot
with(data = pollution, plot(x = latitude, y = pm25, col = region))
abline(h = 12, lwd = 2, lty = 2)
## Now let's draw scatterplot
with(data = pollution, plot(x = latitude, y = pm25, col = region, xlab = "Latitude", ylab = "PM25"))
abline(h = 12, lwd = 2, lty = 2)
with(data = filter(.data = pollution, region == "west"), plot(x = latitude, y = pm25, main = "west"))
?subset
with(data = subset(x = pollution, subset = region == "east"), plot( x = latitude, y = pm25, main = "east"))
data("airquality")
str(airquality)
with(data = airquality, plot(x = Temp, y = Ozone))
lines(loess.smooth(x = Temp, y = Ozone))
with(data = airquality, {
plot(x = Temp, y = Ozone)
lines(loess.smooth(x = Temp, y = Ozone))
})
# Hierarchical Clustering
14400 - 12560
1840 - 880
# Hierarchical Clustering
set.seed(1234)
x <- rnorm(n = 12, mean = rep(1:3, each = 4), sd = 0.2)
x
y <- rnorm(n = 12, mean = rep(c(1, 2, 1), each =4), sd = 0.2)
plot(x = x, y = y, col = "blue", pch = 19, cex = 2)
text(x = x + 0.05, y = y + 0.05, labels = as.character(1:12))
# Hierarchical Clustering
set.seed(1234)
x <- rnorm(n = 12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(n = 12, mean = rep(c(1, 2, 1), each =4), sd = 0.2)
plot(x = x, y = y, col = "blue", pch = 19, cex = 2)
text(x = x + 0.05, y = y + 0.05, labels = as.character(1:12))
par()
dev.off()
# Hierarchical Clustering
set.seed(1234)
x <- rnorm(n = 12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(n = 12, mean = rep(c(1, 2, 1), each =4), sd = 0.2)
plot(x = x, y = y, col = "blue", pch = 19, cex = 2)
text(x = x + 0.05, y = y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
dataFrame
dist(dataFrame)
?dist
0.8447492^2 - 0.7585869^2
(0.8447492^2 - 0.7585869^2)
(0.8447492^2 - 0.7585869^2)^2
sqrt(0.8447492^2 - 0.7585869^2)
sqrt(0.8447492 - 0.7585869)
(0.8447492 - 0.7585869)^2
sqrt((0.8447492 - 0.7585869)^2)
dist
Cdist
dataFrame
dataFrame[1]
dataFrame[1, 2]
dataFrame[1, 1]
dataFrame[]
dataFrame[2, 1] - dataFrame[1, 1]
dataFrame[2, 1] - dataFrame[1, 1]
dataFrame[2, 2] - dataFrame[1, 2]
sqrt(0.296899^2 - 0.1681425^2)
dist(dataFrame)
sqrt(0.296899^2 + 0.1681425^2)
sqrt(0.296899^2 + 0.1681425^2)
dataFrame
View(dataFrame)
dataFrame[3, 1] - dataFrame[2, 1]
sqrt(0.01614024^2 + 0.1681425^2)
sqrt(0.1614024^2 + 0.1681425^2)
dataFrame[3, 1] - dataFrame[2, 1]
dataFrame[3, 2] - dataFrame[2, 2]
sqrt(0.1614024^2 + 0.179007^2)
dataFrame[3, 1] - dataFrame[1, 1]
dataFrame[3, 2] - dataFrame[1, 2]
sqrt(0.4583014^2 + 0.3471496^2)
dist(x = dataFrame, method = "euclidean")
distance.dataFrame <- dist(x = dataFrame, method = "euclidean")
rdistxy <- as.matrix(distance.dataFrame)
rdistxy
ind <- which(rdistxy == min(rdistxy), arr.ind = TRUE)
ind
min(rdis)
min(rdistxy)
head(rdistxy)
diag(rdistxy)
diag(rdistxy) <- diag(rdistxy) * 100000
ind <- which(rdistxy == min(rdistxy), arr.ind = TRUE)
min(rdistxy)
diag(rdistxy) <- diag(rdistxy) * 100000 ## To remove the value from the consideration
ind <- which(rdistxy == min(rdistxy), arr.ind = TRUE)
min(rdistxy)
ind
dataFrame <- data.frame(x = x, y = y) ## Create the dataframe with the randomly generated values
distance.dataFrame <- dist(x = dataFrame, method = "euclidean") ## Calculate the euclidean distance
rdistxy <- as.matrix(distance.dataFrame)  ## Put them in matrix
diag(rdistxy) <- diag(rdistxy) * 100000 ## To remove the value from the consideration
rdistxy
diag(rdistxy) <- diag(rdistxy) + 100000 ## To remove the value from the consideration
ind <- which(rdistxy == min(rdistxy), arr.ind = TRUE)
ind
min(rdistxy)
head(rdistxy)
ind
ind[1, ]
x[ind[1, ]]
ind <- which(rdistxy == min(rdistxy), arr.ind = TRUE)
min(rdistxy)
ind
min(rdistxy)
rdistxy == min(rdistxy)
ind
points(x[ind[1, ]], y[ind[1, ]], col = "orange", pch = 19, cex = 2)
hclust(distance.dataFrame)
as.dendrogram(hclust(distance.dataFrame))
install.packages("ggplot2")
library(ggplot2)
head(airquality)
ggplot(data = airquality, aes(Temp, Ozone) +
geom_point() + geom_smooth(method = "loess", se = FALSE)
geom_point() + geom_smooth(method = "loess", se = FALSE)
ggplot(data = airquality, aes(Temp, Ozone) +
ggplot(data = airquality, aes(Temp, Ozone)) +
geom_point() + geom_smooth(method = "loess", se = FALSE)
ggplot(data = airquality, aes(Temp, Ozone)) +
geom_point() + geom_smooth(method = "loess", se = FALSE)
with(data = airquality, {
plot(Temp, Ozone, col = "black")
lines(loess.smooth(x = Temp, y = Ozone))
})
plot(Temp, Ozone, col = "black", pch = 14)
with(data = airquality, {
plot(Temp, Ozone, col = "black", pch = 14)
lines(loess.smooth(x = Temp, y = Ozone))
})
with(data = airquality, {
plot(Temp, Ozone, col = "black", pch = 20)
lines(loess.smooth(x = Temp, y = Ozone))
})
# Using qplot function in the ggplot2 package
data(mpg)
?mpg
str(mpg)
qplot(x = displ, y = hwy, data = mpg, color = drv)
?drv
?mpg
qplot(x = displ, y = hwy, data = mpg, geom = c("smooth", "point"))
qplot(x = displ, y = hwy, data = mpg, geom = c("smooth", "point"), color = drv)
qplot(x = displ, y = hwy, data = mpg, geom = c("smooth", "point")) ##
qplot(x = displ, y = hwy, data = mpg, geom = c("smooth")) ## Using geom in qplot
qplot(x = displ, y = hwy, data = mpg, geom = c("smooth","point")) ## Using geom in qplot
str(mpg)
qplot(x = hwy, data = mpg, fill = drv)
qplot(x = hwy, data = mpg, fill = drv, binwidth = 2)
qplot(x = drv, y = hwy, data = mpg, geom = "boxplot")
qplot(x = hwy, data = mpg, facets = ~.drv)
qplot(x = hwy, data = mpg, facets = .~drv)
qplot(x = hwy, data = mpg, facets = .~drv, binwidth = 2)
qplot(x = hwy, data = mpg, facets = .~drv, binwidth = 2, fill = drv)
qplot(x = hwy, data = mpg, facets = .~drv, binwidth = 1, fill = drv)
qplot(x = hwy, data = mpg, facets = .~drv, binwidth = 3, fill = drv)
qplot(x = hwy, data = mpg, facets = .~drv, binwidth = 4, fill = drv)
qplot(x = hwy, data = mpg, facets = .~drv, binwidth = 5, fill = drv)
qplot(x = hwy, data = mpg, facets = drv ~., binwidth = 5, fill = drv) ## Separate the histogram by drv
qplot(x = hwy, data = mpg, facets = drv ~., binwidth = 2, fill = drv) ## Separate the histogram by drv
qplot(x = displ, y = hwy, data = mpg, facets = .~drv) + geom_smooth()
maccs
?maacs
??maacs
qplot(x = hwy, data = mpg, facets = drv ~., binwidth = 2, fill = drv) ## Separate the histogram by drv (Separating by Row)
qplot(x = drv, y = hwy, data = mpg, geom = "boxplot") ## Draws a boxplot
qplot(x = drv, y = hwy, data = mpg, geom = "boxplot") ## Draws a boxplot
rm(list = ls())
library(ggplot2)
# Using qplot function in the ggplot2 package
data(mpg)
qplot(x = drv, y = hwy, data = mpg, geom = "boxplot") ## Draws a boxplot
load("/Users/jaewon/Desktop/coursera_datascience/Exploratory Data Analysis/data/maacs.rda")
View(maacs)
# Using ggplot function
maacs <- readRDS("data/maacs.rda")
View(maacs)
# Using ggplot function
maacs <- load(file = "data/maacs.rda")
head(maacs)
maacs
# Using ggplot function
maacs <- load(file = "data/maacs.rda")
maacs <- readRDS(file = "data/maacs_env.rds")
View(maacs)
str(maacs)
# Using ggplot function
maacs <- read.csv(file = "data/bmi_pm25_no2_sim.csv")
head(maacs)
str(maacs)
g <- ggplot(data = maacs, mapping = aes(x = logpm25, y = NocturnalSympt))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth() ## Draw scatterpoint + smooth line
g + geom_point() + geom_smooth(method = "lm") ## Draw scatterpoint + smooth line
str(maacs)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~bmicat) ## Draw scatterpoint + smooth line
g <- ggplot(data = maacs, mapping = aes(x = logpm25, y = NocturnalSympt)) ## Setup a plot parameter
g + geom_point(color = "steelblue", size = 4, alpha = 0.5)
g + geom_point(color = "steelblue", size = 4, alpha = 0.2) #
g + geom_point(aes(color = bmicat), size = 4, alpha = 0.3)
g + geom_point(color = bmicat, size = 4, alpha = 0.2) ## Geompoint properties
g + geom_point(color = "steelblue", size = 4, alpha = 0.2) ## Geompoint properties
g + geom_point(aes(color = bmicat), size = 4, alpha = 0.3)
g + geom_point(aes(color = bmicat), size = 4, alpha = 0.3) +
labs(title = "MAACS Cohort") +
labs(x = expression("log " * PM[2.5]), y = "Nocturnal Symptoms")
?expression
example("expression")
g + geom_point(aes(color = bmicat)) + theme_bw(base_family = "Times")
pbinom(q = 50, size = 40 ,prob = 0.6)
pbinom(q = 40, size = 40 ,prob = 0.6)
pbinom(q = 20, size = 40 ,prob = 0.6)
pbinom(q = 21, size = 40 ,prob = 0.6)
sum(pbinom(q = 21:40, size = 40, prob = 0.6))
sum(pbinom(q = 21:40, size = 50, prob = 0.6))
sum(pbinom(q = 21:40, size = 50, prob = 0.6))
pbinom(q = 20, size = 50, prob = 0.6)
pbinom(q = 21, size = 50, prob = 0.6)
pbinom(q = 40, size = 50, prob = 0.6)
sum(pbinom(q = 21:40, size = 50, prob = 0.6))
sum(pbinom(q = 21:40, size = 50, prob = 0.6))
rm(list = ls())
# Hierarchical Clustering
set.seed(1234)
x <- rnorm(n = 12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(n = 12, mean = rep(c(1, 2, 1), each =4), sd = 0.2)
plot(x = x, y = y, col = "blue", pch = 19, cex = 2)
text(x = x + 0.05, y = y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y) ## Create the dataframe with the randomly generated values
distance.dataFrame <- dist(x = dataFrame, method = "euclidean") ## Calculate the euclidean distance
rdistxy <- as.matrix(distance.dataFrame)  ## Put them in matrix
ind <- which(rdistxy == min(rdistxy), arr.ind = TRUE)
ind
diag(rdistxy) <- diag(rdistxy) + 100000 ## To remove the value from the consideration
ind <- which(rdistxy == min(rdistxy), arr.ind = TRUE)
ind
min(rdistxy)
plot(x = x, y = y, col = "blue", pch = 19, cex = 2)
text(x = x + 0.05, y = y + 0.05, labels = as.character(1:12))
rdistxt
rdistxy
text(x = x + 0.05, y = y + 0.05, labels = as.character(1:12))
points(x[ind[1, ]], y[ind[1, ]], col = "orange", pch = 19, cex = 2)
par(mfrow = c(1, 2))
library(dplyr)
hcluster <- dist(dataFrame) %>% hclust
dendro <- as.dendrogram(hcluster)
cutDendro <- cut(x = dendro, h = (hcluster$height[1] + 0.00001))
cutDendro
plot(cutDendro$lower[[11]], yaxt = "n", main = "Begin Building Tree")
par(mfrow = c(1, 2))
plot(x = x, y = y, col = "blue", pch = 19, cex = 2)
text(x = x + 0.05, y = y + 0.05, labels = as.character(1:12))
points(x[ind[1, ]], y[ind[1, ]], col = "orange", pch = 19, cex = 2) ## Which two points are close together
library(dplyr) ## For pipeline
hcluster <- dist(dataFrame) %>% hclust
dendro <- as.dendrogram(hcluster)
cutDendro <- cut(x = dendro, h = (hcluster$height[1] + 0.00001))
plot(cutDendro$lower[[11]], yaxt = "n", main = "Begin Building Tree")
nextmin <- rdistxy[order(rdistxy)]
nextmin
nextmin <- rdistxy[order(rdistxy)][3]
nextmin
plot(x = x, y = y, col = "blue", pch = 19, cex = 2)
text(x = x + 0.05, y = y + 0.05, labels = as.character(1:12))
points(x[ind[1, ]], y[ind[1, ]], col = "orange", pch = 19, cex = 2) ## Which two points are close together
rdistxy
order(rdistxy)
ind <- which(rdistxy == nextmin, arr.ind = T)
hClustering <- data.frame(x = x, y = y) %>% dist %>% hclust
plot(hClustering)
points(x[ind[1, ]], y[ind[1, ]], col = "red", pch = 19, cex = 2) ## Which two points are close together
nextmin <- rdistxy[order(rdistxy)][3]
ind <- which(rdistxy == nextmin, arr.ind = T)
plot(x = x, y = y, col = "blue", pch = 19, cex = 2)
text(x = x + 0.05, y = y + 0.05, labels = as.character(1:12))
points(x[ind[1, ]], y[ind[1, ]], col = "red", pch = 19, cex = 2) ## Which two points are close together
hClustering <- data.frame(x = x, y = y) %>% dist %>% hclust
plot(hClustering)
ind <- which(rdistxy == min(rdistxy), arr.ind = TRUE)
points(x[ind[1, ]], y[ind[1, ]], col = "orange", pch = 19, cex = 2) ## Which two points are close together
# Kmean Clustering
set.seed(1234) ## Set the data for the Kmean example
x <- rnorm(n = 12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(n = 12, mean = rep(c(1, 2, 1), each =4), sd = 0.2)
plot(x = x, y = y, col = "blue", pch = 19, cex = 2)
text(x = x + 0.05, y = y + 0.05, labels = as.character(1:12))
# Kmean Clustering
par(mfrow = c(1, 1))
set.seed(1234) ## Set the data for the Kmean example
x <- rnorm(n = 12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(n = 12, mean = rep(c(1, 2, 1), each =4), sd = 0.2)
plot(x = x, y = y, col = "blue", pch = 19, cex = 2)
text(x = x + 0.05, y = y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
kmeansObj <- kmeans(x = dataFrame, centers = 3)
names(kmeansObj)
kmeansObj
kmeansObj$cluster
kmeansObj$cluster <- as.factor(kmeansObj$cluster)
ggplot(data = dataFrame, mapping = aes(x = x, y = y, color = kmeansObj))
kmeansObj$cluster
ggplot(data = dataFrame, mapping = aes(x = x, y = y, color = kmeansObj$cluster))
ggplot(data = dataFrame, mapping = aes(x = x, y = y))
dataFrame <- data.frame(x = x, y = y)
ggplot(data = dataFrame, mapping = aes(x = x, y = y))
ggplot(data = dataFrame, mapping = aes(x = x, y = y)) + geom_point()
ggplot(data = dataFrame, mapping = aes(x = x, y = y, color = kmeansObj$cluster)) + geom_point()
