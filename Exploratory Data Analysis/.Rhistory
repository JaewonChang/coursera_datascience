while (z >= 3 && z <= 10) {
coin <- rbinom(1, 1, 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 5
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(1, 1, 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 5
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(1, 1, 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 5
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(1, 1, 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 5
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(1, 1, 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 5
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(1, 1, 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 5
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(5, 1, 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
rbinom(n = 1, size = 5, prob = 0.5)
rbinom(n = 1, size = 5, prob = 0.5)
z <- 5
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 5, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
z <- 5
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 5, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
z <- 5
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 5, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 52
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
z <- 8
set.seed(seed = 20) ## Set the seed for random number generation
while (z >= 3 && z <= 10) {
coin <- rbinom(n = 1, size = 1, prob = 0.5)
if (coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
print(z)
# Next and break
for (i in 1:100) {
if (i <= 20) {
next ## Skips the first 20 iterations
}
print(i)
if (i > 30) {
break ## Stop the loop after 30 iterations
}
}
for (i in 1:100) {
if (i <= 20) {
next ## Skips the first 20 iterations
}
if (i > 30) {
break ## Stop the loop after 30 iterations
}
print(i)
}
seq_len(3)
nchar("hello")
nchar("hello\b")
nchar("hello\n")
nchar("hello\n")
cat("hello")
cat("hello")
cat("hello")
first_function <- function(num = 1) { ## Default parameter with one
hello <- "Hello, world!\n"
for (i in seq_len(num)) {
cat(hello)
}
chars <- nchar(x = hello) * num
chars ## This will also be return value otherwise type return(chars)
}
first_function(3)
args(first_function)
str(first_function)
lapply
# Loop functions
x <- list(a = 1:5, b = rnorm(n = 10))
x
lapply(X = x, FUN = mean)
lapply(X = x, FUN = runif)
x <- 1:5
lapply(X = x, FUN = runif)
lapply(X = x, FUN = runif, min = 0, max = 10)
x <- 1:5
lapply(X = x, FUN = runif, min = 0, max = 10)
x <- list(a = matrix(data = 1:4, nrow = 2, ncol = 2), b = matrix(data = 1:6, nrow = 3, ncol = 2))
x
lapply(X = x, FUN = function(elt) elt[,1])
# Loop functions
x <- list(a = 1:5, b = rnorm(n = 10))
lapply(x, mean)
sapply(x, mean)
lapply(X = x, FUN = mean)
sapply(X = x, FUN = mean)
?split
gl(n = 3, 10)
# Split Function
data("airquality")
str(airquality)
s <- split(x = airquality, f = airquality$Month)
lapply(X = s, FUN = mean)
colMeans(x = x[, c("Ozone", "Solar.R")])
lapply(X = s, FUN = function(x) {
colMeans(x = x[, c("Ozone", "Solar.R")])
})
s <- split(x = airquality, f = airquality$Month)
lapply(X = s, FUN = function(x) {
colMeans(x = x[, c("Ozone", "Solar.R")])
}, na.rm = T)
s <- split(x = airquality, f = airquality$Month)
lapply(X = s, FUN = function(x) {
colMeans(x = x[, c("Ozone", "Solar.R")], na.rm = T)
})
# Tapply Function
x <- c(rnorm(10), runif(10), rnorm(10))
# Tapply Function
x <- c(rnorm(10), runif(10), rnorm(10))
f <- gl(3, 10)
tapply(X = x, INDEX = f, FUN = mean)
?gl
s
# Apply Function
x <- matrix(data = rnorm(200), nrow = 20, ncol = 10)
apply(X = x, MARGIN = 2, FUN = mean)
# Apply Function
x <- matrix(data = rnorm(200), nrow = 20, ncol = 10)
apply(X = x, MARGIN = 2, FUN = mean) ## MARGIN 2 for column and 1 for row
# This is the introduction to exploratory analysis in r
con <- url(description = "https://github.com/jtleek/modules/blob/master/04_ExploratoryAnalysis/exploratoryGraphs/data/avgpm25.csv", open = "r")
data <- readLines(con)
data
head(data)
# This is the introduction to exploratory analysis in r
close.connection(con)
pollution <- read.csv(file = https://github.com/jtleek/modules/blob/master/04_ExploratoryAnalysis/exploratoryGraphs/data/avgpm25.csv)
pollution <- read.csv(file = "https://github.com/jtleek/modules/blob/master/04_ExploratoryAnalysis/exploratoryGraphs/data/avgpm25.csv")
head(pollution)
# This is the introduction to exploratory analysis in r
class <- c("numeric", "character", "factor", "numeric", "numeric")
pollution <- read.csv(file = "https://github.com/jtleek/modules/blob/master/04_ExploratoryAnalysis/exploratoryGraphs/data/avgpm25.csv", colClasses = class)
require("RCurl")
install.packages("RCurl")
require("RCurl")
read.csv(text = getURL("https://github.com/jtleek/modules/blob/master/04_ExploratoryAnalysis/exploratoryGraphs/data/avgpm25.csv"))
read.csv(text = getURL("https://github.com/jtleek/modules/blob/master/04_ExploratoryAnalysis/exploratoryGraphs/data/avgpm25.csv"), skip = 7, header =T)
rm(list = ls())
setwd(dir = paste(getwd(), "Exploratory Data Analysis/", sep = ""))
getwd()
paste(getwd(), "Exploratory Data Analysis/", sep = "")
paste(getwd(), "/Exploratory Data Analysis/", sep = "")
setwd(dir = paste(getwd(), "/Exploratory Data Analysis/", sep = ""))
pollution <- read.csv(file = "data/avgpm25.csv")
head(pollution)
str(pollution)
